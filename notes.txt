7/19/2022 -----

Context enables Flask to make certain variables globally accessible to a thread without interfering in other threads.

Two contexts in Flask: application context and request context.

------------------------------------------------------------------------------------------------------------------------------
current_app     Application context     The application instance for the active application.
g               Application context     An object that the application can use for temporary storage during the handling of
                                        a request. This variable is reset with each request.
request         Request context         The request object, which encapsulates the contents of a HTTP request sent by the
                                        client.
session         Request context         The user session, a dictionary that the application can use to store values that are
                                        “remembered” between requests.
------------------------------------------------------------------------------------------------------------------------------

the application context variables become available to the thread once they are pushed
so, if you try to access those variables beforehand, you generate an error
    app.app_context().push()

When receiving a request from a client, Flask checks the url in the request in the apps url map
Flask builds this using the app.route decorators or the nondecorator version app.add_url_rule()
        app.url_map
'/static/<filename>' route is a route added by Flask for access to static files
the others should be the decorators defined in the application

Flask attaches methods to each route so that different request methods sent to the same URL can be handled by different view functions
    HEAD, OPTIONS, GET, etc.
The HEAD and OPTIONS route methods are automatically managed by Flask

Flask gives the option to register common functions before or after a request is dispatched to view a function.
So you don't have to create the same section of code for accessing the database for each request, as an example.

    before_first_request:   Register a function to run before the first request is
                            handled.
    before_request:         Register a function to run before each request.
    after_request:          Register a function to run after each request, if no unhandled exceptions
                            occurred.
    teardown_request:       Register

So you could use the g application context to store the logged-in user info so as not to have to do it again.
    g.user
The view function can later be used to see what is contained in g.user

7/21/2022 -----

View function in flask expects the return value to be the response to the request
http protocol requires more than just a string as an html page
    return <h1>Bad request</h1>, 400

7/23/2022 -----
To export an environment variable to the WSL path: export variableName=variable
    So to add FLASK_ENV to development (debug mode=on; production for debug mode=off) or FLASK_APP to api.py (to be able to use flask run; only if the file is not named app.py or wsgi.py):
        export FLASK_ENV=development and export FLASK_APP=api.py

To see environment variables in WSL: printenv

To run the file in flask on all addresses: flask run --host=0.0.0.0

7/24/2022 -----

Redirects are commonly used for web forms. from flask import redirect
Redirects do not include a page document but instead gives the browser a new url (a redirect)
    Typically with a 302 response code and the url given in a Location header
    Can be a 3 value response or in Flask, a helper function: redirect()

